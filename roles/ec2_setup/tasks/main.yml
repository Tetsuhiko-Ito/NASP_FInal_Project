---
- name: create ec2 instance
  ec2:
    region: "{{ region }}"
    image: "{{ ami_id }}"
    exact_count: 1
    count_tag:
      Name: "{{ ec2_instance_name }}"
    instance_type: "{{ ec2_instance_type }}"
    key_name: "{{ ssh_key_name }}"
    group: "{{ sg_name }}"
    vpc_subnet_id: "{{ subnet_var.subnet.id }}"
    private_ip: "{{ ec2_private_ip }}"
    user_data: "{{ lookup('file', './ec2_userdata.ps') }}"
    volumes:
      - device_name: /dev/sda1
        delete_on_termination: true
        volume_size: 30
    instance_tags:
      Name: "{{ ec2_instance_name }}"
      group: "{{ ec2_instance_group }}"
    wait: yes
  register: ec2_var

- name: output ec2 data
  debug: 
    msg: "{{ ec2_var }}"
  when: ec2_var is defined 

- name: output ec2 id
  debug: 
    msg: "{{ ec2_var.instances[0].id }}"
  when:  ec2_var.instances[0].id is defined

- name: get ec2 instance info
  ec2_remote_facts:
    region: "{{ region }}"
    filters:
      "tag:Name": "{{ ec2_instance_name }}"
      instance-state-name: running
  register: ec2_retrieved

- name: output retrieved ec2 data
  debug: 
    msg: "{{ ec2_retrieved }}"
  when: ec2_retrieved is defined 

- name: output retrieved ec2 id
  debug: 
    msg: "{{ ec2_retrieved.instances[0].id }}"
  when: ec2_retrieved.instances[0].id is defined 

- name: output retrieved ec2 instance info
  debug: 
    msg: "{{ ec2_retrieved}}"
  when: ec2_retrieved is defined

- name: output retrieved ec2 instance id
  debug: 
    msg: "{{ ec2_retrieved.instances[0].id }}"
  when: ec2_retrieved.instances[0].id is defined


